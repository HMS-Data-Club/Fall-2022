# create animated map
gg_State_Animate <- ggplot(data = State_series,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 15),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
transition_manual(date) +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "Date: {current_frame}", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
animate(plot = gg_State_Animate, renderer = gifski_renderer(loop = FALSE),
fps = 6, end_pause = 12, width = 700, height = 500)
# export animated map
anim_save(filename = "StateMap_animated.gif", path = here("Session-1", "graphs"))
# Add date stamp
lubridate::stamp("Data updated December 31, 1979")(lubridate::now())
# Add session info
# note, the [-8] omits packages installed, but not loaded for this analysis
utils:::print.sessionInfo(sessionInfo()[-8])
# B/c Mario is awesome
library(beepr)
beep(sound = 8)
# This is an example of an R code chunk.
# For this session, please only edit code within R code chunks like this, focusing on the missing pieces shown with "___".
# load packages
library(tidyverse)
library(ggplot2)
library(here)
library(zoo)
library(lubridate)
# inspect working directory
getwd()
# inspect here::here()
here::here()
# import data directly from GitHub
US_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
# inspect data briefly
str(US_data)
summary(US_data)
# calculate daily new cases and rolling 7-day average
US_daily_graph <- US_data %>%
mutate(cases.daily = cases - lag(cases),
cases.daily.ave = rollmeanr(cases.daily, 7, fill = NA))
# graph 7-day average of new cases vs date
ggplot(data = US_daily_graph,
mapping = aes(x = date, y = cases.daily.ave)) +
geom_line(color = "red") +
geom_area(fill = "#F8DDDD") +
scale_x_date(breaks = seq(mdy("02-01-20"), mdy("08-01-22"), by = "5 months"),
date_labels = "%b %Y") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, color = "grey95")) +
labs(x = "Date", y = "7-day average of new cases",
title = "New reported COVID-19 cases in the US",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "US_NewReportedCases.png", path = here("Session-1", "graphs"),
width = 7, height = 4, units = "in", bg = "white")
# import COVID data from GitHub
States_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# import population data from folder.
State_population <- read_csv(file = here::here("Session-1", "data", "population-us-2020-census.csv"))
# wrangle data
State_daily_graph <- States_data %>%
arrange(state, date) %>%
left_join(State_population, by = "state") %>%
filter(!is.na(resident.population)) %>%
# State_population does not contain data for the territories, remove these from analysis
group_by(state) %>%
mutate(cases.daily = cases - lag(cases),
cases.daily.ave = rollmeanr(cases.daily, 7, fill = NA),
cases.daily.ave.density = cases.daily.ave / resident.population * 100000) %>%
ungroup()
# graph data
ggplot(data = State_daily_graph,
mapping = aes(x = date, y = cases.daily.ave.density)) +
geom_line(color = "grey45") +
scale_x_date(breaks = seq(mdy("03-01-20"), mdy("08-01-22"), by = "7 months"),
date_labels = "%b %Y") +
facet_wrap(facets = "state", nrow = 8) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Date", y = "Average daily cases per 100,000 people",
title = "New reported COVID-19 cases in different states",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "State_AverageDailyCasesPer100k_FacetWrap.png",
path = here::here("Session-1", "graphs"),
width = 11, height = 11, units = "in", bg = "white")
# load library
library(geofacet)
# use facet_geo() instead of facet_wrap()
ggplot(data = State_daily_graph,
mapping = aes(x = date, y = cases.daily.ave.density)) +
geom_line(color = "grey45") +
facet_geo(~ state) +
theme_bw() +
theme(panel.grid = element_blank()) +
labs(title = "New reported COVID-19 cases in different states",
subtitle = "Average daily cases per 100,000 people",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "State_AverageDailyCasesPer100k_GeoWrap.png",
path = here::here("Session-1", "graphs"),
width = 14, height = 8, units = "in", bg = "white")
# import datasets
Masks_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/mask-use/mask-use-by-county.csv")
Colleges_Universities <- read_csv(file = here::here("Session-1", "data", "us-colleges-and-universities.csv"))
County_fips <- read_tsv(file = here("Session-1", "data", "county_fips.txt"))
# calculate chance of encountering someone wearing a mask in different counties
Masks_data_simplified <- Masks_data %>%
mutate(chances = NEVER * 0 + RARELY * 0.25 + SOMETIMES * 0.5 + FREQUENTLY * 0.75 + ALWAYS * 1) %>%
rename(fips = COUNTYFP) %>%
select(fips, chances)
# calculate number of schools per county
Colleges_Universities_summary <- Colleges_Universities %>%
count(COUNTYFIPS) %>%
rename(fips = COUNTYFIPS, college.number = n)
# combine datasets
College_Masks <- left_join(County_fips, Colleges_Universities_summary, by = "fips") %>%
left_join(Masks_data_simplified, by = "fips") %>%
mutate(college.county = case_when(!is.na(college.number) ~ "Yes",
TRUE ~ "No"), .after = college.number) %>%
filter(!is.na(chances))
# create violin plot with dots
ggplot(data = College_Masks,
mapping = aes(x = college.county, y = chances)) +
geom_violin(width = 0.6, fill = NA, color = "grey45") +
geom_jitter(shape = 21, color = "grey75", size = 0.5, width = 0.08) +
stat_summary(fun = "mean", geom = "crossbar", colour = "red", width = 0.3, size = 0.2) +
scale_y_continuous(limits = c(0.4, 1)) +
theme_bw() +
theme(panel.grid = element_line(size = 0.2, color = "grey95")) +
labs(x = "Presence of college/university in the county",
y = "Chances of someone wearing a mask\nin random encounter",
title = "Mask wearing and presence of college/university",
caption = "Data source: New York Times. Retrieved from GitHub.")
# save graph
ggsave(filename = "MaskWearing_CollegeInCounty.png",
path = here::here("Session-1", "graphs"),
width = 8, height = 6, units = "in", bg = "white")
t.test(chances ~ college.county, data = College_Masks)
# load libraries
library(plotly)
library(htmlwidgets)
# create ggplot
gg_College_Masks <- ggplot(data = College_Masks,
mapping = aes(x = college.county, y = chances)) +
geom_violin(width = 0.3, fill = NA, color = "grey45") +
geom_jitter(shape = 21, color = "grey75", size = 0.2, width = 0.08) +
stat_summary(fun = "mean", geom = "crossbar", colour = "red", width = 0.3, size = 0.2) +
scale_y_continuous(limits = c(0.4, 1)) +
theme_bw() +
theme(panel.grid = element_line(size = 0.2, color = "grey95")) +
labs(x = "Presence of college/university in the county",
y = "Chances of someone wearing a mask\nin random encounter",
title = "Mask wearing and presence of college/university",
caption = "Data source: New York Times. Retrieved from GitHub.")
# create interactive plot
gg_College_Masks <- plotly::ggplotly(gg_College_Masks)
gg_College_Masks
# save the interactive plot as a separate file
htmlwidgets::saveWidget(gg_College_Masks,
file = here("Session-1", "graphs", "MaskWearing_CollegeInCounty_Interactive.html"))
# load libraries
library(maps)
# pull geographical data from the maps package.
States_Map <- map_data("state")
# create a map based on geographical data using ggplot
ggplot(data = States_Map,
mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(color = "grey25", size = 0.1, fill = NA) +
coord_map() +
theme_void() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "US map")
# combine geographical data with covid data
# b/c once we have a dataset with geographical data with covid data, we can use the argument fill to show covid cases
State_1day <- State_daily_graph %>%
filter(date == mdy("01-08-22")) %>%
select(date, region = state, cases.daily.ave.density) %>%
mutate(region = str_to_lower(region)) %>%
left_join(States_Map, by = "region")
ggplot(data = State_1day,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "01-08-22", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
ggsave(filename = "StateMap_DuringOmicron.png",
path = here::here("Session-1", "graphs"),
width = 10, height = 6, units = "in", bg = "white")
# load libraries
library(gganimate)
library(gifski)
# create dataset, including selecting the dates you want to graph
# to save processing time, we recommend graphing every week or every two week
State_series <- State_daily_graph %>%
filter(date %in% seq(from = mdy("04-01-2020"), to = Sys.Date() - 1, by = "week")) %>%
select(date, region = state, cases.daily.ave.density) %>%
mutate(region = str_to_lower(region)) %>%
left_join(States_Map, by = "region")
# create animated map
gg_State_Animate <- ggplot(data = State_series,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 15),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
transition_manual(date) +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "Date: {current_frame}", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
animate(plot = gg_State_Animate, renderer = gifski_renderer(loop = FALSE),
fps = 6, end_pause = 12, width = 700, height = 500)
# export animated map
anim_save(filename = "StateMap_animated.gif", path = here("Session-1", "graphs"))
# Add date stamp
lubridate::stamp("Data updated December 31, 1979")(lubridate::now())
# Add session info
# note, the [-8] omits packages installed, but not loaded for this analysis
utils:::print.sessionInfo(sessionInfo()[-8])
# B/c Mario is awesome
library(beepr)
beep(sound = 8)
# load libraries
library(gganimate)
library(gifski)
# create dataset, including selecting the dates you want to graph
# to save processing time, we recommend graphing every week or every two week
State_series <- State_daily_graph %>%
filter(date %in% seq(from = mdy("04-01-2020"), to = Sys.Date() - 1, by = "week")) %>%
select(date, region = state, cases.daily.ave.density) %>%
mutate(region = str_to_lower(region)) %>%
left_join(States_Map, by = "region")
# create animated map
gg_State_Animate <- ggplot(data = State_series,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 15),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
transition_manual(date) +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "Date: {current_frame}", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
animate(plot = gg_State_Animate, renderer = gifski_renderer(loop = FALSE),
fps = 6, end_pause = 12, width = 700, height = 500)
# export animated map
anim_save(filename = "StateMap_Animated.gif", path = here("Session-1", "graphs"))
# export animated map
anim_save(filename = "StateMap_Animated.gif", path = here("Session-1", "graphs"))
# This is an example of an R code chunk.
# For this session, please only edit code within R code chunks like this, focusing on the missing pieces shown with "___".
# load packages
library(tidyverse)
library(ggplot2)
library(here)
library(zoo)
library(lubridate)
# inspect working directory
getwd()
# inspect here::here()
here::here()
# import data directly from GitHub
US_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
# inspect data briefly
str(US_data)
summary(US_data)
# calculate daily new cases and rolling 7-day average
US_daily_graph <- US_data %>%
mutate(cases.daily = cases - lag(cases),
cases.daily.ave = rollmeanr(cases.daily, 7, fill = NA))
# graph 7-day average of new cases vs date
ggplot(data = US_daily_graph,
mapping = aes(x = date, y = cases.daily.ave)) +
geom_line(color = "red") +
geom_area(fill = "#F8DDDD") +
scale_x_date(breaks = seq(mdy("02-01-20"), mdy("08-01-22"), by = "5 months"),
date_labels = "%b %Y") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2, color = "grey95")) +
labs(x = "Date", y = "7-day average of new cases",
title = "New reported COVID-19 cases in the US",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "US_NewReportedCases.png", path = here("Session-1", "graphs"),
width = 7, height = 4, units = "in", bg = "white")
# import COVID data from GitHub
States_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# import population data from folder.
State_population <- read_csv(file = here::here("Session-1", "data", "population-us-2020-census.csv"))
# wrangle data
State_daily_graph <- States_data %>%
arrange(state, date) %>%
left_join(State_population, by = "state") %>%
filter(!is.na(resident.population)) %>%
# State_population does not contain data for the territories, remove these from analysis
group_by(state) %>%
mutate(cases.daily = cases - lag(cases),
cases.daily.ave = rollmeanr(cases.daily, 7, fill = NA),
cases.daily.ave.density = cases.daily.ave / resident.population * 100000) %>%
ungroup()
# graph data
ggplot(data = State_daily_graph,
mapping = aes(x = date, y = cases.daily.ave.density)) +
geom_line(color = "grey45") +
scale_x_date(breaks = seq(mdy("03-01-20"), mdy("08-01-22"), by = "7 months"),
date_labels = "%b %Y") +
facet_wrap(facets = "state", nrow = 8) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Date", y = "Average daily cases per 100,000 people",
title = "New reported COVID-19 cases in different states",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "State_AverageDailyCasesPer100k_FacetWrap.png",
path = here::here("Session-1", "graphs"),
width = 11, height = 11, units = "in", bg = "white")
# load library
library(geofacet)
# use facet_geo() instead of facet_wrap()
ggplot(data = State_daily_graph,
mapping = aes(x = date, y = cases.daily.ave.density)) +
geom_line(color = "grey45") +
facet_geo(~ state) +
theme_bw() +
theme(panel.grid = element_blank()) +
labs(title = "New reported COVID-19 cases in different states",
subtitle = "Average daily cases per 100,000 people",
caption = "Data source: New York Times. Retrieved from GitHub.")
# export graph
ggsave(filename = "State_AverageDailyCasesPer100k_GeoWrap.png",
path = here::here("Session-1", "graphs"),
width = 14, height = 8, units = "in", bg = "white")
# import datasets
Masks_data <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/mask-use/mask-use-by-county.csv")
Colleges_Universities <- read_csv(file = here::here("Session-1", "data", "us-colleges-and-universities.csv"))
County_fips <- read_tsv(file = here("Session-1", "data", "county_fips.txt"))
# calculate chance of encountering someone wearing a mask in different counties
Masks_data_simplified <- Masks_data %>%
mutate(chances = NEVER * 0 + RARELY * 0.25 + SOMETIMES * 0.5 + FREQUENTLY * 0.75 + ALWAYS * 1) %>%
rename(fips = COUNTYFP) %>%
select(fips, chances)
# calculate number of schools per county
Colleges_Universities_summary <- Colleges_Universities %>%
count(COUNTYFIPS) %>%
rename(fips = COUNTYFIPS, college.number = n)
# combine datasets
College_Masks <- left_join(County_fips, Colleges_Universities_summary, by = "fips") %>%
left_join(Masks_data_simplified, by = "fips") %>%
mutate(college.county = case_when(!is.na(college.number) ~ "Yes",
TRUE ~ "No"), .after = college.number) %>%
filter(!is.na(chances))
# create violin plot with dots
ggplot(data = College_Masks,
mapping = aes(x = college.county, y = chances)) +
geom_violin(width = 0.6, fill = NA, color = "grey45") +
geom_jitter(shape = 21, color = "grey75", size = 0.5, width = 0.08) +
stat_summary(fun = "mean", geom = "crossbar", colour = "red", width = 0.3, size = 0.2) +
scale_y_continuous(limits = c(0.4, 1)) +
theme_bw() +
theme(panel.grid = element_line(size = 0.2, color = "grey95")) +
labs(x = "Presence of college/university in the county",
y = "Chances of someone wearing a mask\nin random encounter",
title = "Mask wearing and presence of college/university",
caption = "Data source: New York Times. Retrieved from GitHub.")
# save graph
ggsave(filename = "MaskWearing_CollegeInCounty.png",
path = here::here("Session-1", "graphs"),
width = 8, height = 6, units = "in", bg = "white")
t.test(chances ~ college.county, data = College_Masks)
# load libraries
library(plotly)
library(htmlwidgets)
# create ggplot
gg_College_Masks <- ggplot(data = College_Masks,
mapping = aes(x = college.county, y = chances)) +
geom_violin(width = 0.3, fill = NA, color = "grey45") +
geom_jitter(shape = 21, color = "grey75", size = 0.2, width = 0.08) +
stat_summary(fun = "mean", geom = "crossbar", colour = "red", width = 0.3, size = 0.2) +
scale_y_continuous(limits = c(0.4, 1)) +
theme_bw() +
theme(panel.grid = element_line(size = 0.2, color = "grey95")) +
labs(x = "Presence of college/university in the county",
y = "Chances of someone wearing a mask\nin random encounter",
title = "Mask wearing and presence of college/university",
caption = "Data source: New York Times. Retrieved from GitHub.")
# create interactive plot
gg_College_Masks <- plotly::ggplotly(gg_College_Masks)
gg_College_Masks
# save the interactive plot as a separate file
htmlwidgets::saveWidget(gg_College_Masks,
file = here("Session-1", "graphs", "MaskWearing_CollegeInCounty_Interactive.html"))
# load libraries
library(maps)
# pull geographical data from the maps package.
States_Map <- map_data("state")
# create a map based on geographical data using ggplot
ggplot(data = States_Map,
mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(color = "grey25", size = 0.1, fill = NA) +
coord_map() +
theme_void() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "US map")
# combine geographical data with covid data
# b/c once we have a dataset with geographical data with covid data, we can use the argument fill to show covid cases
State_1day <- State_daily_graph %>%
filter(date == mdy("01-08-22")) %>%
select(date, region = state, cases.daily.ave.density) %>%
mutate(region = str_to_lower(region)) %>%
left_join(States_Map, by = "region")
ggplot(data = State_1day,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "01-08-22", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
ggsave(filename = "StateMap_DuringOmicron.png",
path = here::here("Session-1", "graphs"),
width = 10, height = 6, units = "in", bg = "white")
# load libraries
library(gganimate)
library(gifski)
# create dataset, including selecting the dates you want to graph
# to save processing time, we recommend graphing every week or every two week
State_series <- State_daily_graph %>%
filter(date %in% seq(from = mdy("04-01-2020"), to = Sys.Date() - 1, by = "week")) %>%
select(date, region = state, cases.daily.ave.density) %>%
mutate(region = str_to_lower(region)) %>%
left_join(States_Map, by = "region")
# create animated map
gg_State_Animate <- ggplot(data = State_series,
mapping = aes(x = long, y = lat, group = group,
fill = cases.daily.ave.density)) +
geom_polygon(color = "grey25", size = 0.1) +
coord_map() +
scale_fill_gradient2(low = "white", mid = "#F04F0B", high = "#4C0D3D", na.value = "white",
limits = c(0, 650), midpoint = 300) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 15),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
transition_manual(date) +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(10, 10, 10, 10), "pt")) +
labs(title = "Average daily cases per 100k people",
subtitle = "Date: {current_frame}", fill = "",
caption = "Data source: New York Times. Retrieved from GitHub.")
animate(plot = gg_State_Animate, renderer = gifski_renderer(loop = FALSE),
fps = 6, end_pause = 12, width = 700, height = 500)
# export animated map
anim_save(filename = "StateMap_Animated.gif", path = here("Session-1", "graphs"))
# Add date stamp
lubridate::stamp("Data updated December 31, 1979")(lubridate::now())
# Add session info
# note, the [-8] omits packages installed, but not loaded for this analysis
utils:::print.sessionInfo(sessionInfo()[-8])
# B/c Mario is awesome
library(beepr)
beep(sound = 8)
